// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DAL.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20210310092806_UserAuthAndRoles")]
    partial class UserAuthAndRoles
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("DAL.Entities.Country", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("timezone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("DAL.Entities.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("DocumentTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("DAL.Entities.DocumentType", b =>
                {
                    b.Property<int>("DocumentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DocumentTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DocumentTypeId");

                    b.ToTable("DocumentType");
                });

            modelBuilder.Entity("DAL.Entities.Episode", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("GameOfThroneid")
                        .HasColumnType("int");

                    b.Property<int?>("_linksid")
                        .HasColumnType("int");

                    b.Property<string>("airdate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("airstamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("airtime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("imageid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("number")
                        .HasColumnType("int");

                    b.Property<int>("runtime")
                        .HasColumnType("int");

                    b.Property<int>("season")
                        .HasColumnType("int");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("GameOfThroneid");

                    b.HasIndex("_linksid");

                    b.HasIndex("imageid");

                    b.ToTable("Episodes");
                });

            modelBuilder.Entity("DAL.Entities.Externals", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("imdb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("thetvdb")
                        .HasColumnType("int");

                    b.Property<int>("tvrage")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.ToTable("Externals");
                });

            modelBuilder.Entity("DAL.Entities.GameOfThrone", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("_linksid")
                        .HasColumnType("int");

                    b.Property<int?>("externalsid")
                        .HasColumnType("int");

                    b.Property<int?>("imageid")
                        .HasColumnType("int");

                    b.Property<string>("language")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("networkid")
                        .HasColumnType("int");

                    b.Property<string>("officialSite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("premiered")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ratingid")
                        .HasColumnType("int");

                    b.Property<int>("runtime")
                        .HasColumnType("int");

                    b.Property<int?>("scheduleid")
                        .HasColumnType("int");

                    b.Property<string>("status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("summary")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("updated")
                        .HasColumnType("int");

                    b.Property<string>("url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("webChannelid")
                        .HasColumnType("int");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("_linksid");

                    b.HasIndex("externalsid");

                    b.HasIndex("imageid");

                    b.HasIndex("networkid");

                    b.HasIndex("ratingid");

                    b.HasIndex("scheduleid");

                    b.HasIndex("webChannelid");

                    b.ToTable("GameOfThrones");
                });

            modelBuilder.Entity("DAL.Entities.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("medium")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("original")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Image");
                });

            modelBuilder.Entity("DAL.Entities.Links", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int?>("previousepisodeid")
                        .HasColumnType("int");

                    b.Property<int?>("selfid")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("previousepisodeid");

                    b.HasIndex("selfid");

                    b.ToTable("Links");
                });

            modelBuilder.Entity("DAL.Entities.Network", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("countryid");

                    b.ToTable("Network");
                });

            modelBuilder.Entity("DAL.Entities.Previousepisode", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("href")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Previousepisode");
                });

            modelBuilder.Entity("DAL.Entities.Rating", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<double>("average")
                        .HasColumnType("float");

                    b.HasKey("id");

                    b.ToTable("Rating");
                });

            modelBuilder.Entity("DAL.Entities.Schedule", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("time")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Schedule");
                });

            modelBuilder.Entity("DAL.Entities.Self", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("href")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.ToTable("Self");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRole")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DAL.Entities.WebChannel", b =>
                {
                    b.Property<int>("id")
                        .HasColumnType("int");

                    b.Property<int?>("countryid")
                        .HasColumnType("int");

                    b.Property<string>("name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("id");

                    b.HasIndex("countryid");

                    b.ToTable("WebChannel");
                });

            modelBuilder.Entity("DAL.Entities.Document", b =>
                {
                    b.HasOne("DAL.Entities.DocumentType", "DocumentType")
                        .WithMany()
                        .HasForeignKey("DocumentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.User", "User")
                        .WithMany("Documents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DocumentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DAL.Entities.Episode", b =>
                {
                    b.HasOne("DAL.Entities.GameOfThrone", null)
                        .WithMany("episodes")
                        .HasForeignKey("GameOfThroneid");

                    b.HasOne("DAL.Entities.Links", "_links")
                        .WithMany()
                        .HasForeignKey("_linksid");

                    b.HasOne("DAL.Entities.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageid");

                    b.Navigation("_links");

                    b.Navigation("image");
                });

            modelBuilder.Entity("DAL.Entities.GameOfThrone", b =>
                {
                    b.HasOne("DAL.Entities.Links", "_links")
                        .WithMany()
                        .HasForeignKey("_linksid");

                    b.HasOne("DAL.Entities.Externals", "externals")
                        .WithMany()
                        .HasForeignKey("externalsid");

                    b.HasOne("DAL.Entities.Image", "image")
                        .WithMany()
                        .HasForeignKey("imageid");

                    b.HasOne("DAL.Entities.Network", "network")
                        .WithMany()
                        .HasForeignKey("networkid");

                    b.HasOne("DAL.Entities.Rating", "rating")
                        .WithMany()
                        .HasForeignKey("ratingid");

                    b.HasOne("DAL.Entities.Schedule", "schedule")
                        .WithMany()
                        .HasForeignKey("scheduleid");

                    b.HasOne("DAL.Entities.WebChannel", "webChannel")
                        .WithMany()
                        .HasForeignKey("webChannelid");

                    b.Navigation("_links");

                    b.Navigation("externals");

                    b.Navigation("image");

                    b.Navigation("network");

                    b.Navigation("rating");

                    b.Navigation("schedule");

                    b.Navigation("webChannel");
                });

            modelBuilder.Entity("DAL.Entities.Links", b =>
                {
                    b.HasOne("DAL.Entities.Previousepisode", "previousepisode")
                        .WithMany()
                        .HasForeignKey("previousepisodeid");

                    b.HasOne("DAL.Entities.Self", "self")
                        .WithMany()
                        .HasForeignKey("selfid");

                    b.Navigation("previousepisode");

                    b.Navigation("self");
                });

            modelBuilder.Entity("DAL.Entities.Network", b =>
                {
                    b.HasOne("DAL.Entities.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid");

                    b.Navigation("country");
                });

            modelBuilder.Entity("DAL.Entities.WebChannel", b =>
                {
                    b.HasOne("DAL.Entities.Country", "country")
                        .WithMany()
                        .HasForeignKey("countryid");

                    b.Navigation("country");
                });

            modelBuilder.Entity("DAL.Entities.GameOfThrone", b =>
                {
                    b.Navigation("episodes");
                });

            modelBuilder.Entity("DAL.Entities.User", b =>
                {
                    b.Navigation("Documents");
                });
#pragma warning restore 612, 618
        }
    }
}
